---
description: Key rules and architecture for the QA Toolsmith project.
globs: ["**/*"]
alwaysApply: true
---

# AI Rules for QA Toolsmith

QA Toolsmith to otwarto≈∫r√≥d≈Çowa aplikacja internetowa dla tester√≥w oprogramowania, kt√≥ra standaryzuje ich codzienne zadania, takie jak raportowanie b≈Çƒôd√≥w, testy eksploracyjne i generowanie danych testowych.

## Tech Stack

- **Framework:** Astro 5 (SSR) z adapterem `@astrojs/cloudflare` dla Cloudflare Pages
- **UI:** React 19 z TypeScript 5
- **Stylowanie:** Tailwind 4 i shadcn/ui
- **Backend:** Supabase (PostgreSQL, Auth)
- **Hosting:** Cloudflare Pages (SSR z Workers)
- **Testowanie:** Vitest (testy jednostkowe), Playwright (testy E2E)

## Project Structure

Zawsze przestrzegaj poni≈ºszej struktury katalog√≥w:

- `src/pages/`: Strony Astro (`.astro`) i punkty ko≈Ñcowe API (`.ts`).
- `src/components/`: Interaktywne komponenty React (`.tsx`).
- `src/components/ui/`: Komponenty z biblioteki shadcn/ui.
- `src/layouts/`: G≈Ç√≥wne uk≈Çady stron Astro.
- `src/lib/`: Logika biznesowa, podzielona na `services/`, `utils/`, `hooks/`.
- `src/db/`: Klient Supabase i typy bazy danych.
- `src/middleware/`: Middleware Astro do autentykacji i zarzƒÖdzania sesjƒÖ.
- `src/__tests__/`: Testy jednostkowe Vitest.
- `e2e/`: Testy End-to-End Playwright.

## Kluczowe Zasady Kodowania i Architektury

1.  **Astro vs React:** U≈ºywaj komponent√≥w Astro (`.astro`) do statycznej zawarto≈õci i layout√≥w. Komponenty React (`.tsx`) implementuj **tylko** wtedy, gdy wymagana jest interaktywno≈õƒá po stronie klienta.
2.  **Dostƒôp do Supabase (Server-side):** W stronach i punktach ko≈Ñcowych API Astro **zawsze** u≈ºywaj instancji Supabase z `context.locals.supabase`. **Nigdy** nie importuj klienta bezpo≈õrednio.
3.  **Walidacja:** U≈ºywaj schemat√≥w **Zod** do walidacji wszystkich danych wej≈õciowych w punktach ko≈Ñcowych API.
4.  **Obs≈Çuga B≈Çƒôd√≥w i Czysty Kod:**
    - Priorytetyzuj obs≈Çugƒô b≈Çƒôd√≥w. U≈ºywaj "guard clauses" i wczesnych `return`, aby obs≈Çugiwaƒá b≈Çƒôdy na poczƒÖtku funkcji.
    - Unikaj zagnie≈ºd≈ºonych instrukcji `if` oraz zbƒôdnych blok√≥w `else`.
    - Wykorzystuj linter feedback do poprawy kodu przy wprowadzaniu zmian.
5.  **Testowanie:** Dodawaj testy jednostkowe Vitest dla nowej logiki w `src/lib/`. Dodawaj testy E2E Playwright dla nowych przep≈Çyw√≥w u≈ºytkownika.
6.  **Backend i Supabase:** 
    - U≈ºywaj typ√≥w z `src/db/database.types.ts`, nie z `@supabase/supabase-js`
    - Row Level Security (RLS) jest wymagane dla wszystkich tabel
    - Wszystkie operacje na bazie danych powinny respektowaƒá polityki RLS
7.  **Stylowanie:**
    - U≈ºywaj Tailwind CSS z klasami utility-first
    - Implementuj responsywno≈õƒá z breakpointami (sm:, md:, lg:)
    - Wykorzystuj varianty dark mode (dark:)
8.  **Dostƒôpno≈õƒá (a11y):**
    - Minimalne wymagania: focus visible, labels dla p√≥l formularzy, cele dotykowe ‚â•40px
    - U≈ºywaj landmark√≥w ARIA dla g≈Ç√≥wnych region√≥w strony
    - Testuj nawigacjƒô klawiaturowƒÖ
9.  **API Endpoints:**
    - U≈ºywaj metod HTTP: POST, GET w wielkich literach
    - Ustaw `export const prerender = false` dla wszystkich API routes
    - Zwracaj strukturyzowane b≈Çƒôdy: `{ error: { code, message, details } }`
    - U≈ºywaj snake_case w odpowiedziach API dla zgodno≈õci z backendem
10. **Environment Variables:**
    - U≈ºywaj `import.meta.env` zamiast `process.env` (kompatybilne z Cloudflare Workers)
    - Aktualizuj `src/env.d.ts` przy dodawaniu nowych zmiennych
    - Aktualizuj `.env.example` zgodnie ze zmianami

üìö **Szczeg√≥≈Çowe wytyczne:**
- **Frontend:** Zobacz `frontend-coding.mdc` dla szczeg√≥≈Ç√≥w Astro, React, Tailwind, shadcn/ui
- **Backend:** Zobacz `backend-api.mdc` dla Supabase, API, migracji, RLS
- **Planowanie:** Zobacz `planning.mdc` dla PRD, user stories, MVP scope