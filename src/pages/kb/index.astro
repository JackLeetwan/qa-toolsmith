---
/* eslint-disable */
// @ts-expect-error - Astro global provided by the framework
import PublicLayout from "@/layouts/PublicLayout.astro";
import { isFeatureEnabled } from "@/features";
import KbEntriesList from "@/components/kb/KbEntriesList";

export const prerender = false;

// Check if knowledgeBase feature is enabled
// @ts-expect-error - Astro global provided by the framework
if (!isFeatureEnabled("collections.knowledgeBase")) {
  // @ts-expect-error - Astro global provided by the framework
  return Astro.redirect("/", 302);
}

// Get user context (may be null for unauthenticated users)
// @ts-expect-error - Astro global provided by the framework
const user = Astro.locals.user || null;

// Check if we're in E2E test environment (Node adapter with test env vars)
const isTestEnvironment = process.env.NODE_ENV === 'test' ||
  process.env.ENV_NAME === 'integration' ||
  !!process.env.E2E_USERNAME;

// Check if this is an authenticated E2E test (indicated by URL parameter or test environment)
const isAuthenticatedTest = isTestEnvironment && (
  Astro.url.searchParams.has('authenticated') ||
  Astro.url.searchParams.has('test') ||
  process.env.E2E_FORCE_AUTH === 'true'
);

// Mock user for E2E tests when SSR sessions don't work properly
// Only use mock user for authenticated test scenarios
const mockUser = isAuthenticatedTest
  ? { id: "951570d9-7a13-4bdc-8454-8013ee124d63", email: process.env.E2E_USERNAME || "test@example.com" }
  : null;

// Debug logging for SSR
console.log("üîç KB Page SSR Debug:");
console.log("   user from Astro.locals:", user ? { id: user.id.substring(0, 8) + "...", email: user.email } : null);
console.log("   isTestEnvironment:", isTestEnvironment);
console.log("   process.env.E2E_USERNAME:", process.env.E2E_USERNAME ? "SET" : "NOT SET");
console.log("   mockUser:", mockUser ? { id: mockUser.id.substring(0, 8) + "...", email: mockUser.email } : null);


// Only set mockRole='admin' for admin tests (when admin credentials are present and user matches admin email)
// This allows admin tests to show admin UI controls while regular user tests use real roles
const isAdminTest = isTestEnvironment &&
  user &&
  process.env.E2E_ADMIN_USERNAME &&
  process.env.E2E_ADMIN_PASSWORD &&
  user.email === process.env.E2E_ADMIN_USERNAME;

const mockRole = isAdminTest ? 'admin' : (isTestEnvironment ? 'user' : undefined);

---

<PublicLayout title="Knowledge Base" description="ZarzƒÖdzaj swojƒÖ bazƒÖ wiedzy">
  <div class="max-w-4xl mx-auto py-8">
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-2">Knowledge Base</h1>
      <p class="text-muted-foreground">
        {user
          ? "ZarzƒÖdzaj swojƒÖ bazƒÖ wiedzy - dodawaj linki, notatki i tagi."
          : "PrzeglƒÖdaj publicznƒÖ bazƒô wiedzy. Zaloguj siƒô, aby dodaƒá w≈Çasne wpisy."}
      </p>
    </div>

    <KbEntriesList
      client:idle
      user={user}
      role={user?.role}
      mockUser={mockUser}
      mockRole={mockRole}
      data-testid="kb-entries-list"
    />
  </div>
</PublicLayout>
