name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      checks: write
      contents: read
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-output
          path: dist/
      - name: Install Playwright browsers
        run: npx playwright install chromium
      - name: Start preview server
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Server started with PID: $SERVER_PID"
        env:
          PORT: 3000
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      - name: Wait for server to start
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health >/dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
          if [ $i -eq 30 ]; then
            echo "Server failed to start"
            exit 1
          fi
      - name: Debug environment variables
        run: |
          echo "🔍 Environment variables check:"
          echo "SUPABASE_URL: ${SUPABASE_URL:+✅ Set}"
          echo "SUPABASE_KEY: ${SUPABASE_KEY:+✅ Set}"
          echo "E2E_USERNAME: ${E2E_USERNAME:+✅ Set}"
          echo "E2E_PASSWORD: ${E2E_PASSWORD:+✅ Set}"
          echo "E2E_USERNAME_ID: ${E2E_USERNAME_ID:+✅ Set}"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      - name: Run E2E tests with preview server
        run: npm run test:e2e
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      - name: Upload HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report/
          retention-days: 30
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30
      - name: Publish test results
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: E2E Tests
          path: test-results/junit.xml
          reporter: java-junit
      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping server with PID: $SERVER_PID"
            kill $SERVER_PID || true
            pkill -f "astro preview" || true
          fi

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: e2e
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-output
          path: dist/
      - name: Start server
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        env:
          PORT: 3000
          SUPABASE_URL: "https://dummy.supabase.co"
          SUPABASE_KEY: "dummy-key"
          SUPABASE_SERVICE_KEY: "dummy-service-key"
          OPENROUTER_API_KEY: "dummy-key"
      - name: Wait for server to start
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health >/dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
      - name: Check health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health)
          echo "Health endpoint response: $response"
          if [ "$response" != "200" ]; then
            echo "Health check failed with status code $response"
            curl -v http://localhost:3000/api/health || true
            exit 1
          else
            echo "Health check passed with status code $response"
          fi
      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          pkill -f "astro preview" || true
